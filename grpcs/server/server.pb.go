// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.3
// source: server.proto

package grpc_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义 StandData 数据结构
type SmpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serct    string                         `protobuf:"bytes,1,opt,name=serct,proto3" json:"serct,omitempty"`
	Uuid     string                         `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Hostname string                         `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ipv4     string                         `protobuf:"bytes,4,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Time     *timestamppb.Timestamp         `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	Cpu      *SmpCpu                        `protobuf:"bytes,7,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Disk     map[string]*SmpDisk            `protobuf:"bytes,8,rep,name=disk,proto3" json:"disk,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Memory   *SmpMemory                     `protobuf:"bytes,9,opt,name=memory,proto3" json:"memory,omitempty"`
	Kmodules map[string]*Win32_SystemDriver `protobuf:"bytes,10,rep,name=kmodules,proto3" json:"kmodules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Smpnet   map[string]*SmpNetInfo         `protobuf:"bytes,11,rep,name=Smpnet,proto3" json:"Smpnet,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Smpps    map[string]*SmPsInfo           `protobuf:"bytes,12,rep,name=smpps,proto3" json:"smpps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SmpData) Reset() {
	*x = SmpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmpData) ProtoMessage() {}

func (x *SmpData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmpData.ProtoReflect.Descriptor instead.
func (*SmpData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

func (x *SmpData) GetSerct() string {
	if x != nil {
		return x.Serct
	}
	return ""
}

func (x *SmpData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SmpData) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *SmpData) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *SmpData) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *SmpData) GetCpu() *SmpCpu {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *SmpData) GetDisk() map[string]*SmpDisk {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *SmpData) GetMemory() *SmpMemory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *SmpData) GetKmodules() map[string]*Win32_SystemDriver {
	if x != nil {
		return x.Kmodules
	}
	return nil
}

func (x *SmpData) GetSmpnet() map[string]*SmpNetInfo {
	if x != nil {
		return x.Smpnet
	}
	return nil
}

func (x *SmpData) GetSmpps() map[string]*SmPsInfo {
	if x != nil {
		return x.Smpps
	}
	return nil
}

// CPU
type SmpCpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Core  int64  `protobuf:"varint,2,opt,name=core,proto3" json:"core,omitempty"`
	Usage string `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *SmpCpu) Reset() {
	*x = SmpCpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmpCpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmpCpu) ProtoMessage() {}

func (x *SmpCpu) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmpCpu.ProtoReflect.Descriptor instead.
func (*SmpCpu) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

func (x *SmpCpu) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SmpCpu) GetCore() int64 {
	if x != nil {
		return x.Core
	}
	return 0
}

func (x *SmpCpu) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

// Disk
type SmpDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Total       string `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
	Free        string `protobuf:"bytes,3,opt,name=free,proto3" json:"free,omitempty"`
	Used        string `protobuf:"bytes,4,opt,name=used,proto3" json:"used,omitempty"`
	UsedPercent string `protobuf:"bytes,5,opt,name=usedPercent,proto3" json:"usedPercent,omitempty"`
	Device      string `protobuf:"bytes,6,opt,name=device,proto3" json:"device,omitempty"`
	Fstype      string `protobuf:"bytes,7,opt,name=fstype,proto3" json:"fstype,omitempty"`
	MountPoint  string `protobuf:"bytes,8,opt,name=mountPoint,proto3" json:"mountPoint,omitempty"`
}

func (x *SmpDisk) Reset() {
	*x = SmpDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmpDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmpDisk) ProtoMessage() {}

func (x *SmpDisk) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmpDisk.ProtoReflect.Descriptor instead.
func (*SmpDisk) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{2}
}

func (x *SmpDisk) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SmpDisk) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *SmpDisk) GetFree() string {
	if x != nil {
		return x.Free
	}
	return ""
}

func (x *SmpDisk) GetUsed() string {
	if x != nil {
		return x.Used
	}
	return ""
}

func (x *SmpDisk) GetUsedPercent() string {
	if x != nil {
		return x.UsedPercent
	}
	return ""
}

func (x *SmpDisk) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *SmpDisk) GetFstype() string {
	if x != nil {
		return x.Fstype
	}
	return ""
}

func (x *SmpDisk) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

// Memory
type SmpMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualMemory *VirtualMemory `protobuf:"bytes,1,opt,name=virtual_memory,json=virtualMemory,proto3" json:"virtual_memory,omitempty"`
	SwapMemory    *SwapMemory    `protobuf:"bytes,2,opt,name=swap_memory,json=swapMemory,proto3" json:"swap_memory,omitempty"`
}

func (x *SmpMemory) Reset() {
	*x = SmpMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmpMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmpMemory) ProtoMessage() {}

func (x *SmpMemory) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmpMemory.ProtoReflect.Descriptor instead.
func (*SmpMemory) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3}
}

func (x *SmpMemory) GetVirtualMemory() *VirtualMemory {
	if x != nil {
		return x.VirtualMemory
	}
	return nil
}

func (x *SmpMemory) GetSwapMemory() *SwapMemory {
	if x != nil {
		return x.SwapMemory
	}
	return nil
}

type VirtualMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       string `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Used        string `protobuf:"bytes,2,opt,name=used,proto3" json:"used,omitempty"`
	Free        string `protobuf:"bytes,3,opt,name=free,proto3" json:"free,omitempty"`
	UsedPercent string `protobuf:"bytes,4,opt,name=usedPercent,proto3" json:"usedPercent,omitempty"`
}

func (x *VirtualMemory) Reset() {
	*x = VirtualMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMemory) ProtoMessage() {}

func (x *VirtualMemory) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMemory.ProtoReflect.Descriptor instead.
func (*VirtualMemory) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{4}
}

func (x *VirtualMemory) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *VirtualMemory) GetUsed() string {
	if x != nil {
		return x.Used
	}
	return ""
}

func (x *VirtualMemory) GetFree() string {
	if x != nil {
		return x.Free
	}
	return ""
}

func (x *VirtualMemory) GetUsedPercent() string {
	if x != nil {
		return x.UsedPercent
	}
	return ""
}

type SwapMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       string `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Used        string `protobuf:"bytes,2,opt,name=used,proto3" json:"used,omitempty"`
	Free        string `protobuf:"bytes,3,opt,name=free,proto3" json:"free,omitempty"`
	UsedPercent string `protobuf:"bytes,4,opt,name=usedPercent,proto3" json:"usedPercent,omitempty"`
}

func (x *SwapMemory) Reset() {
	*x = SwapMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapMemory) ProtoMessage() {}

func (x *SwapMemory) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapMemory.ProtoReflect.Descriptor instead.
func (*SwapMemory) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{5}
}

func (x *SwapMemory) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *SwapMemory) GetUsed() string {
	if x != nil {
		return x.Used
	}
	return ""
}

func (x *SwapMemory) GetFree() string {
	if x != nil {
		return x.Free
	}
	return ""
}

func (x *SwapMemory) GetUsedPercent() string {
	if x != nil {
		return x.UsedPercent
	}
	return ""
}

// module
type Win32_SystemDriver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State     string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Startmode string `protobuf:"bytes,3,opt,name=startmode,proto3" json:"startmode,omitempty"`
}

func (x *Win32_SystemDriver) Reset() {
	*x = Win32_SystemDriver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Win32_SystemDriver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Win32_SystemDriver) ProtoMessage() {}

func (x *Win32_SystemDriver) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Win32_SystemDriver.ProtoReflect.Descriptor instead.
func (*Win32_SystemDriver) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{6}
}

func (x *Win32_SystemDriver) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Win32_SystemDriver) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Win32_SystemDriver) GetStartmode() string {
	if x != nil {
		return x.Startmode
	}
	return ""
}

// Net
type SmpNetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mtu  int64  `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Mac  string `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	Ip   string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *SmpNetInfo) Reset() {
	*x = SmpNetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmpNetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmpNetInfo) ProtoMessage() {}

func (x *SmpNetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmpInfo.ProtoReflect.Descriptor instead.
func (*SmpNetInfo) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{7}
}

func (x *SmpNetInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SmpNetInfo) GetMtu() int64 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *SmpNetInfo) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *SmpNetInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// Ps
type SmPsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	User              string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Pid               string `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	CpuPercent        string `protobuf:"bytes,5,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`
	MemPercent        string `protobuf:"bytes,6,opt,name=mem_percent,json=memPercent,proto3" json:"mem_percent,omitempty"`
	VritualMemorySize string `protobuf:"bytes,7,opt,name=vritual_memory_size,json=vritualMemorySize,proto3" json:"vritual_memory_size,omitempty"`
	ResidentSetSize   string `protobuf:"bytes,8,opt,name=resident_set_size,json=residentSetSize,proto3" json:"resident_set_size,omitempty"`
	StartTime         string `protobuf:"bytes,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Cmd               string `protobuf:"bytes,10,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (x *SmPsInfo) Reset() {
	*x = SmPsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmPsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmPsInfo) ProtoMessage() {}

func (x *SmPsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmPsInfo.ProtoReflect.Descriptor instead.
func (*SmPsInfo) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{8}
}

func (x *SmPsInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SmPsInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SmPsInfo) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *SmPsInfo) GetCpuPercent() string {
	if x != nil {
		return x.CpuPercent
	}
	return ""
}

func (x *SmPsInfo) GetMemPercent() string {
	if x != nil {
		return x.MemPercent
	}
	return ""
}

func (x *SmPsInfo) GetVritualMemorySize() string {
	if x != nil {
		return x.VritualMemorySize
	}
	return ""
}

func (x *SmPsInfo) GetResidentSetSize() string {
	if x != nil {
		return x.ResidentSetSize
	}
	return ""
}

func (x *SmPsInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SmPsInfo) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

type ResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResponseMessage) Reset() {
	*x = ResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMessage) ProtoMessage() {}

func (x *ResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMessage.ProtoReflect.Descriptor instead.
func (*ResponseMessage) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{9}
}

func (x *ResponseMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ResponseMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_server_proto protoreflect.FileDescriptor

var file_server_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x06, 0x0a,
	0x07, 0x53, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x72, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x72, 0x63, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70,
	0x76, 0x34, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6d,
	0x70, 0x43, 0x70, 0x75, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x69, 0x73,
	0x6b, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x2e, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x70, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x3e, 0x0a,
	0x08, 0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6d,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x06, 0x53, 0x6d, 0x70, 0x6e, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x6d, 0x70, 0x6e, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x53, 0x6d, 0x70, 0x6e, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x6d, 0x70, 0x70, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6d, 0x70,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x6d, 0x70, 0x70, 0x73, 0x1a, 0x4d,
	0x0a, 0x09, 0x44, 0x69, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x70, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a,
	0x0d, 0x4b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x69,
	0x6e, 0x33, 0x32, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x0b, 0x53,
	0x6d, 0x70, 0x6e, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x0a,
	0x53, 0x6d, 0x70, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x50, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a,
	0x06, 0x53, 0x6d, 0x70, 0x43, 0x70, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x07, 0x53, 0x6d, 0x70, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x09, 0x53, 0x6d, 0x70, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x22, 0x70, 0x0a, 0x0e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x0b, 0x53, 0x77, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x65,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x12, 0x57, 0x69, 0x6e, 0x33, 0x32, 0x5f, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0x51, 0x0a, 0x07, 0x53, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d,
	0x74, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x22, 0x93, 0x02, 0x0a, 0x08, 0x53, 0x6d, 0x50, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x76, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x72, 0x69, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0x3f, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x4f, 0x0a, 0x0d, 0x50,
	0x75, 0x73, 0x68, 0x41, 0x67, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x08,
	0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1c,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x04, 0x5a, 0x02,
	0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_proto_rawDescOnce sync.Once
	file_server_proto_rawDescData = file_server_proto_rawDesc
)

func file_server_proto_rawDescGZIP() []byte {
	file_server_proto_rawDescOnce.Do(func() {
		file_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_rawDescData)
	})
	return file_server_proto_rawDescData
}

var file_server_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_server_proto_goTypes = []interface{}{
	(*SmpData)(nil),               // 0: grpc_server.SmpData
	(*SmpCpu)(nil),                // 1: grpc_server.SmpCpu
	(*SmpDisk)(nil),               // 2: grpc_server.SmpDisk
	(*SmpMemory)(nil),             // 3: grpc_server.SmpMemory
	(*VirtualMemory)(nil),         // 4: grpc_server.Virtual_memory
	(*SwapMemory)(nil),            // 5: grpc_server.Swap_memory
	(*Win32_SystemDriver)(nil),    // 6: grpc_server.Win32_SystemDriver
	(*SmpNetInfo)(nil),            // 7: grpc_server.SmpInfo
	(*SmPsInfo)(nil),              // 8: grpc_server.SmPsInfo
	(*ResponseMessage)(nil),       // 9: grpc_server.ResponseMessage
	nil,                           // 10: grpc_server.SmpData.DiskEntry
	nil,                           // 11: grpc_server.SmpData.KmodulesEntry
	nil,                           // 12: grpc_server.SmpData.SmpnetEntry
	nil,                           // 13: grpc_server.SmpData.SmppsEntry
	(*timestamppb.Timestamp)(nil), // 14: google.protobuf.Timestamp
}
var file_server_proto_depIdxs = []int32{
	14, // 0: grpc_server.SmpData.time:type_name -> google.protobuf.Timestamp
	1,  // 1: grpc_server.SmpData.cpu:type_name -> grpc_server.SmpCpu
	10, // 2: grpc_server.SmpData.disk:type_name -> grpc_server.SmpData.DiskEntry
	3,  // 3: grpc_server.SmpData.memory:type_name -> grpc_server.SmpMemory
	11, // 4: grpc_server.SmpData.kmodules:type_name -> grpc_server.SmpData.KmodulesEntry
	12, // 5: grpc_server.SmpData.Smpnet:type_name -> grpc_server.SmpData.SmpnetEntry
	13, // 6: grpc_server.SmpData.smpps:type_name -> grpc_server.SmpData.SmppsEntry
	4,  // 7: grpc_server.SmpMemory.virtual_memory:type_name -> grpc_server.Virtual_memory
	5,  // 8: grpc_server.SmpMemory.swap_memory:type_name -> grpc_server.Swap_memory
	2,  // 9: grpc_server.SmpData.DiskEntry.value:type_name -> grpc_server.SmpDisk
	6,  // 10: grpc_server.SmpData.KmodulesEntry.value:type_name -> grpc_server.Win32_SystemDriver
	7,  // 11: grpc_server.SmpData.SmpnetEntry.value:type_name -> grpc_server.SmpInfo
	8,  // 12: grpc_server.SmpData.SmppsEntry.value:type_name -> grpc_server.SmPsInfo
	0,  // 13: grpc_server.PushAgantData.SendData:input_type -> grpc_server.SmpData
	9,  // 14: grpc_server.PushAgantData.SendData:output_type -> grpc_server.ResponseMessage
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmpCpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmpDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmpMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Win32_SystemDriver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmpNetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmPsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
		MessageInfos:      file_server_proto_msgTypes,
	}.Build()
	File_server_proto = out.File
	file_server_proto_rawDesc = nil
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PushAgantDataClient is the client API for PushAgantData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PushAgantDataClient interface {
	SendData(ctx context.Context, in *SmpData, opts ...grpc.CallOption) (*ResponseMessage, error)
}

type pushAgantDataClient struct {
	cc grpc.ClientConnInterface
}

func NewPushAgantDataClient(cc grpc.ClientConnInterface) PushAgantDataClient {
	return &pushAgantDataClient{cc}
}

func (c *pushAgantDataClient) SendData(ctx context.Context, in *SmpData, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/grpc_server.PushAgantData/SendData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushAgantDataServer is the server API for PushAgantData service.
type PushAgantDataServer interface {
	SendData(context.Context, *SmpData) (*ResponseMessage, error)
}

// UnimplementedPushAgantDataServer can be embedded to have forward compatible implementations.
type UnimplementedPushAgantDataServer struct {
}

func (*UnimplementedPushAgantDataServer) SendData(context.Context, *SmpData) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendData not implemented")
}

func RegisterPushAgantDataServer(s *grpc.Server, srv PushAgantDataServer) {
	s.RegisterService(&_PushAgantData_serviceDesc, srv)
}

func _PushAgantData_SendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmpData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushAgantDataServer).SendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.PushAgantData/SendData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushAgantDataServer).SendData(ctx, req.(*SmpData))
	}
	return interceptor(ctx, in, info, handler)
}

var _PushAgantData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_server.PushAgantData",
	HandlerType: (*PushAgantDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendData",
			Handler:    _PushAgantData_SendData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
